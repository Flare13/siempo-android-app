From 928d527d5a3dbd49c460fbf040c81fbf58d13dd6 Mon Sep 17 00:00:00 2001
From: Hardik Kamothi <hardik.kamothi@volansystech.com>
Date: Tue, 12 Sep 2017 12:29:23 +0530
Subject: [PATCH] SSA-232 Application crashes on launcher transition         -
 Solve issue by change lifecycle flow.

---
 MiniumApps/launcher3/lint.xml                      |  12 +-
 .../main/java/co/siempo/phone/MainActivity.java    | 145 ++++++++++++++++-----
 .../co/siempo/phone/applist/AppDrawerActivity.java | 127 ++++++++++++++----
 .../co/siempo/phone/main/MainListItemLoader.java   |  61 +++++++++
 .../phone/notification/NotificationFragment.java   |  42 ++----
 .../java/co/siempo/phone/pause/PauseActivity.java  | 122 +++++++++++++----
 .../settings/SiempoAlphaSettingsActivity.java      | 126 ++++++++++++++++--
 .../phone/settings/SiempoMainSettingsActivity.java | 145 ++++++++++++++++++---
 .../phone/settings/SiempoSettingsActivity.java     | 125 ++++++++++++++++--
 .../java/co/siempo/phone/tempo/TempoActivity.java  | 126 ++++++++++++++----
 .../src/main/res/layout/list_item_apps.xml         |   3 +-
 11 files changed, 849 insertions(+), 185 deletions(-)

diff --git a/MiniumApps/launcher3/lint.xml b/MiniumApps/launcher3/lint.xml
index 0c031ff..8a8abef 100644
--- a/MiniumApps/launcher3/lint.xml
+++ b/MiniumApps/launcher3/lint.xml
@@ -11,14 +11,18 @@
         <ignore path="src/main/res/drawable/bg_siempo.png" />
         <ignore path="src/main/res/drawable/icon_tempo.png" />
     </issue>
+    <issue id="InvalidAnalyticsName" severity="ignore" />
+    <issue id="Layo" severity="ignore" />
+    <issue id="Registered" severity="ignore" />
     <issue id="UnusedResources">
+        <ignore path="src/main/res/drawable-hdpi/check.png" />
+        <ignore path="src/main/res/drawable-mdpi/check.png" />
         <ignore path="src/main/res/drawable-mdpi/hibernate_50.png" />
+        <ignore path="src/main/res/drawable-xhdpi/check.png" />
         <ignore path="src/main/res/drawable-xhdpi/hibernate_50.png" />
+        <ignore path="src/main/res/drawable-xxhdpi/check.png" />
         <ignore path="src/main/res/drawable-xxhdpi/hibernate_50.png" />
+        <ignore path="src/main/res/drawable-xxxhdpi/check.png" />
         <ignore path="src/main/res/drawable-xxxhdpi/hibernate_50.png" />
     </issue>
-    <issue id="Registered" severity="ignore"/>
-    <issue id="InvalidAnalyticsName" severity="ignore"/>
-    <issue id="Layo" severity="ignore"/>
-
 </lint>
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/MainActivity.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/MainActivity.java
index 6da0e80..cb27e0d 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/MainActivity.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/MainActivity.java
@@ -94,6 +94,10 @@ public class MainActivity extends CoreActivity implements SmsObserver.OnSmsSentL
 
     private ActivityState state;
 
+    /**
+     * Activitystate is use to identify state whether the screen is coming from
+     * after homepress event or from normal flow.
+     */
     private enum ActivityState {
         NORMAL,
         ONHOMEPRESS
@@ -207,11 +211,17 @@ public class MainActivity extends CoreActivity implements SmsObserver.OnSmsSentL
         public void onPermissionGranted() {
             Log.d(TAG,"Permission granted");
             loadViews();
-            loadStatusBar();
             if (!launcherPrefs.isAppInstalledFirstTime().get()) {
                 Log.d(TAG,"Display upgrade dialog.");
                 checkUpgradeVersion();
             }
+            else{
+                /**
+                 * Restrict native status bar and load siempo status bar when first time app launch
+                 */
+                Log.d(TAG,"App installed first time");
+                loadStatusBar();
+            }
         }
 
         @Override
@@ -244,25 +254,59 @@ public class MainActivity extends CoreActivity implements SmsObserver.OnSmsSentL
         Log.d(TAG,"ACTION HOME PRESS");
         state=ActivityState.ONHOMEPRESS;
         if (event.isVisible()) {
-            if (StatusBarHandler.isNotificationTrayVisible) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
 
                 Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
-                if (f instanceof NotificationFragment)
+                if(f == null){
+                    Log.d(TAG,"Notification Fragment is NULL");
+                }
+                else if (f!=null && f.isAdded() && f instanceof NotificationFragment)
                 {
+                    Log.d(TAG,"Remove Notification fragment");
                     StatusBarHandler.isNotificationTrayVisible = false;
                     ((NotificationFragment) f).animateOut();
+                }
 
+            }
+
+            /**
+             *  Below snippet is use to remove siempo status bar
+             */
+            if(statusBarHandler!=null){
+                NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+                try{
+                    Log.d(TAG,"Restore statusbar");
+                    statusBarHandler.restoreStatusBarExpansion();
+                } catch (Exception e) {
+                    e.printStackTrace();
                 }
             }
+
         }
     }
 
-    @UiThread(delay = 1000)
-    void loadStatusBar() {
-        statusBarHandler = new StatusBarHandler(MainActivity.this);
-        if (statusBarHandler != null && !statusBarHandler.isActive()) {
-            Log.d(TAG, "LOAD STATUSBAR ::: ACTION PREVENT");
-            statusBarHandler.requestStatusBarCustomization();
+    /**
+     *  Below snippet is use to first check if siempo status bar is restricted from another activity,
+     *  then it first remove siempo status bar and restrict siempo status bar with reference to this activity
+     */
+    synchronized void loadStatusBar() {
+        try {
+            statusBarHandler = new StatusBarHandler(MainActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                Log.d(TAG, "LOAD STATUSBAR ::: RESTORE PREVENT");
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+            if (statusBarHandler != null && !statusBarHandler.isActive()) {
+                Log.d(TAG, "LOAD STATUSBAR ::: ACTION PREVENT");
+                statusBarHandler.requestStatusBarCustomization();
+            }
+        }
+        catch (Exception e){
+            e.printStackTrace();
         }
     }
     @Subscribe
@@ -350,33 +394,41 @@ public class MainActivity extends CoreActivity implements SmsObserver.OnSmsSentL
     @Override
     protected void onStart() {
         super.onStart();
+        Log.d(TAG,"onStart...");
         if(state==ActivityState.ONHOMEPRESS){
             checkUpgradeVersion();
             state=ActivityState.NORMAL;
         }
+        /**
+         * Restrict native status bar and load siempo status bar
+         *  when activity restart OR activity launch from siempo launcher
+         */
+        if (!launcherPrefs.isAppInstalledFirstTime().get()) {
+            loadStatusBar();
+        }
 
     }
 
-
     @Override
     protected void onStop() {
         super.onStop();
-        //currentIndex = 0;
-
-        NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
-        if(statusBarHandler!=null){
-            try{
-                Log.d(TAG,"ONSTOP ::: ACTION RESTORE");
-                statusBarHandler.restoreStatusBarExpansion();
-            } catch (Exception e) {
-                e.printStackTrace();
-            }
-        }
+        currentIndex=0;
     }
 
+
     @Override
     protected void onResume() {
         super.onResume();
+        Log.d(TAG,"onResume.. ");
+
+        /**
+         * Below snippet is use to load siempo status bar when launch from background.
+         */
+        if(state==ActivityState.ONHOMEPRESS){
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+        }
 
         try {
             enableNfc(true);
@@ -404,7 +456,6 @@ public class MainActivity extends CoreActivity implements SmsObserver.OnSmsSentL
             Tag tag = intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
             EventBus.getDefault().post(new NFCEvent(true, tag));
         }
-        loadStatusBar();
     }
 
     private void enableNfc(boolean isEnable) {
@@ -433,19 +484,21 @@ public class MainActivity extends CoreActivity implements SmsObserver.OnSmsSentL
 
     @Override
     public void onBackPressed() {
-        try{
-        if (StatusBarHandler.isNotificationTrayVisible) {
-            Log.d(TAG,"onBackPressed");
-            Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
-            if (f!=null && f instanceof NotificationFragment)
-            {
-                StatusBarHandler.isNotificationTrayVisible = false;
-                //noinspection ConstantConditions
-                ((NotificationFragment) f).animateOut();
-
+        try {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            if (statusBarHandler!=null && StatusBarHandler.isNotificationTrayVisible) {
+                Log.d(TAG, "onBackPressed");
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if (f == null) {
+                    Log.d(TAG, "Fragment is null");
+                } else if (f != null && f.isAdded() && f instanceof NotificationFragment) {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    ((NotificationFragment) f).animateOut();
+                } else if (pager.getCurrentItem() == 1) {
+                    pager.setCurrentItem(0);
                 }
-            } else if (pager.getCurrentItem() == 1) {
-                pager.setCurrentItem(0);
             }
         }
         catch (Exception e){
@@ -457,8 +510,7 @@ public class MainActivity extends CoreActivity implements SmsObserver.OnSmsSentL
     @Override
     protected void onRestart() {
         super.onRestart();
-        Log.d(TAG,"RESTART ::: ACTION RESTART");
-        loadStatusBar();
+        Log.d(TAG,"Restart ... ");
     }
 
     public void checkVersionFromAppUpdater(){
@@ -514,4 +566,25 @@ public class MainActivity extends CoreActivity implements SmsObserver.OnSmsSentL
     }
 
 
+    public void restoreSiempoNotificationBar(){
+        try {
+            statusBarHandler = new StatusBarHandler(MainActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+
+            if (StatusBarHandler.isNotificationTrayVisible) {
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if (f == null) {
+                } else if (f != null && f.isAdded() && f instanceof NotificationFragment) {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    ((NotificationFragment) f).animateOut();
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
 }
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/applist/AppDrawerActivity.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/applist/AppDrawerActivity.java
index 28535d1..4046a04 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/applist/AppDrawerActivity.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/applist/AppDrawerActivity.java
@@ -33,6 +33,7 @@ import co.siempo.phone.ui.TopFragment_;
 import de.greenrobot.event.EventBus;
 import de.greenrobot.event.Subscribe;
 import minium.co.core.app.CoreApplication;
+import minium.co.core.event.HomePressEvent;
 import minium.co.core.log.Tracer;
 import minium.co.core.ui.CoreActivity;
 
@@ -62,6 +63,28 @@ public class AppDrawerActivity extends CoreActivity {
     InstalledAppListAdapter installedAppListAdapter;
     private String TAG="AppDrawerActivity";
 
+
+    private ActivityState state;
+
+
+    /**
+     * Activitystate is use to identify state whether the screen is coming from
+     * after homepress event or from normal flow.
+     */
+
+    private enum ActivityState {
+        NORMAL,
+        ONHOMEPRESS
+    }
+
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        if(state== ActivityState.ONHOMEPRESS){
+            state= ActivityState.NORMAL;
+        }
+    }
     @AfterViews
     void afterViews() {
 
@@ -92,11 +115,24 @@ public class AppDrawerActivity extends CoreActivity {
 
     }
 
-    @UiThread(delay = 1000)
-    void loadStatusBar() {
-        statusBarHandler = new StatusBarHandler(AppDrawerActivity.this);
-        if(statusBarHandler!=null && !statusBarHandler.isActive()) {
-            statusBarHandler.requestStatusBarCustomization();
+    /**
+     *  Below snippet is use to first check if siempo status bar is restricted from another activity,
+     *  then it first remove siempo status bar and restrict siempo status bar with reference to this activity
+     */
+    synchronized void loadStatusBar() {
+        try {
+            statusBarHandler = new StatusBarHandler(AppDrawerActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
@@ -108,6 +144,14 @@ public class AppDrawerActivity extends CoreActivity {
     @Override
     protected void onResume() {
         super.onResume();
+        /**
+         * Below snippet is use to load siempo status bar when launch from background.
+         */
+        if(state== ActivityState.ONHOMEPRESS){
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+        }
 
     }
 
@@ -125,31 +169,31 @@ public class AppDrawerActivity extends CoreActivity {
     @Override
     protected void onStop() {
         super.onStop();
-        NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
-        try {
-            if(statusBarHandler!=null)
-                statusBarHandler.restoreStatusBarExpansion();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
     }
 
 
     @Override
     public void onBackPressed() {
-        super.onBackPressed();
-        try{
-            if (statusBarHandler.isNotificationTrayVisible) {
-                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
-                if (f instanceof NotificationFragment) ;
-                {
-                    statusBarHandler.isNotificationTrayVisible = false;
-                    ((NotificationFragment) f).animateOut();
-                }
+        /**
+         *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+         */
+        if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+            Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+            if(f == null){
+                super.onBackPressed();
+            }
+            else if (f!=null && f instanceof NotificationFragment && f.isAdded())
+            {
+                statusBarHandler.isNotificationTrayVisible = false;
+                ((NotificationFragment) f).animateOut();
+                super.onBackPressed();
+            }
+            else{
+                super.onBackPressed();
             }
         }
-        catch (Exception e){
-            e.printStackTrace();
+        else{
+            super.onBackPressed();
         }
     }
 
@@ -160,4 +204,41 @@ public class AppDrawerActivity extends CoreActivity {
         loadStatusBar();
     }
 
+
+    @SuppressWarnings("ConstantConditions")
+    @Subscribe
+    public void homePressEvent(HomePressEvent event) {
+        Log.d(TAG,"ACTION HOME PRESS");
+        state= ActivityState.ONHOMEPRESS;
+        if (event.isVisible()) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            if (StatusBarHandler.isNotificationTrayVisible) {
+
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if(f == null){
+                    Log.d(TAG,"Fragment is null");
+                }
+                else if (f!=null && f.isAdded() && f instanceof NotificationFragment)
+                {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    ((NotificationFragment) f).animateOut();
+
+                }
+            }
+            /**
+             *  Below snippet is use to remove siempo status bar
+             */
+            if(statusBarHandler!=null){
+                NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+                try{
+                    statusBarHandler.restoreStatusBarExpansion();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
 }
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/main/MainListItemLoader.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/main/MainListItemLoader.java
index 28ac761..5f22b4b 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/main/MainListItemLoader.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/main/MainListItemLoader.java
@@ -107,14 +107,33 @@ public class MainListItemLoader {
     }
 
     public void listItemClicked(int id) {
+        MainActivity mainActivity = (MainActivity)context;
         switch (id) {
             case 1:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openMessagingApp();
                 break;
             case 2:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openCallApp();
                 break;
             case 3:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openContactsApp();
                 break;
             case 4:
@@ -124,6 +143,12 @@ public class MainListItemLoader {
                 UIUtils.alert(context, getString(R.string.msg_not_yet_implemented));
                 break;
             case 6:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openNotesApp(false);
                 break;
             case 7:
@@ -139,6 +164,12 @@ public class MainListItemLoader {
                 TempoActivity_.intent(context).start();
                 break;
             case 11:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openGMape(Constants.GOOGLE_MAP_PACKAGE);
                 break;
             case 12:
@@ -155,22 +186,52 @@ public class MainListItemLoader {
                 ApiClient_.getInstance_(context).checkAppVersion();
                 break;
             case 16:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openGmail();
                 break;
             case 17: //new ActivityHelper(context).openGoogleInbox(); break;
             case 18:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openFeedback();
                 break;
             case 19:
                 AppDrawerActivity_.intent(context).start();
                 break;
             case 20:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openCalenderApp();
                 break;
             case 21:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openClockApp();
                 break;
             case 22:
+                /**
+                 *  Load native status bar
+                 */
+                if(mainActivity!=null) {
+                    mainActivity.restoreSiempoNotificationBar();
+                }
                 new ActivityHelper(context).openPhotsApp();
                 break;
             default:
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/notification/NotificationFragment.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/notification/NotificationFragment.java
index 561e72b..c78ea9c 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/notification/NotificationFragment.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/notification/NotificationFragment.java
@@ -333,38 +333,18 @@ public class NotificationFragment extends CoreFragment implements View.OnTouchLi
         return false;
     }
 
+    /**
+     * Below snippet is use to remove notification fragment
+     */
     public void animateOut() {
-        TranslateAnimation trans = new TranslateAnimation(0, 0, 0, -500 * UIUtils.getDensity(getActivity()));
-        trans.setFillAfter(true);
-        trans.setDuration(500);
-        trans.setAnimationListener(new Animation.AnimationListener() {
-
-            @Override
-            public void onAnimationStart(Animation animation) {
-
-            }
-
-            @Override
-            public void onAnimationRepeat(Animation animation) {
-
-            }
-
-            @Override
-            public void onAnimationEnd(Animation animation) {
-                try {
-                    linSecond.setClickable(true);
-                    EventBus.getDefault().post(new NotificationTrayEvent(false));
-//                    getActivity().getFragmentManager().popBackStack();
-                    getActivity().getFragmentManager().beginTransaction().remove(NotificationFragment.this).commit();
-                    Config.isNotificationAlive = false;
-                    LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(new Intent("IsNotificationVisible").putExtra("IsNotificationVisible", false));
-                } catch (Exception e) {
-                    Tracer.e(e, e.getMessage());
-                }
-            }
-        });
-        if (getView() != null) {
-            getView().startAnimation(trans);
+        try {
+            linSecond.setClickable(true);
+            EventBus.getDefault().post(new NotificationTrayEvent(false));
+            getActivity().getFragmentManager().beginTransaction().remove(NotificationFragment.this).commit();
+            Config.isNotificationAlive = false;
+            LocalBroadcastManager.getInstance(getActivity()).sendBroadcast(new Intent("IsNotificationVisible").putExtra("IsNotificationVisible", false));
+        } catch (Exception e) {
+            Tracer.e(e, e.getMessage());
         }
     }
 
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/pause/PauseActivity.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/pause/PauseActivity.java
index 3a0c74b..804c604 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/pause/PauseActivity.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/pause/PauseActivity.java
@@ -29,6 +29,7 @@ import co.siempo.phone.notification.NotificationRetreat_;
 import co.siempo.phone.notification.StatusBarHandler;
 import co.siempo.phone.ui.TopFragment_;
 import de.greenrobot.event.Subscribe;
+import minium.co.core.event.HomePressEvent;
 import minium.co.core.log.Tracer;
 import minium.co.core.ui.CoreActivity;
 import minium.co.core.util.UIUtils;
@@ -51,6 +52,16 @@ public class PauseActivity extends CoreActivity {
     private Handler nfcCheckHandler;
     private Runnable nfcRunnable;
 
+    private ActivityState state;
+    /**
+     * Activitystate is use to identify state whether the screen is coming from
+     * after homepress event or from normal flow.
+     */
+    private enum ActivityState {
+        NORMAL,
+        ONHOMEPRESS
+    }
+
     @AfterViews
     void afterViews() {
         // To check the notification service is enable or not.
@@ -74,13 +85,26 @@ public class PauseActivity extends CoreActivity {
         loadStatusBar();
     }
 
+    /**
+     *  Below snippet is use to first check if siempo status bar is restricted from another activity,
+     *  then it first remove siempo status bar and restrict siempo status bar with reference to this activity
+     */
+    synchronized void loadStatusBar() {
+        try {
+            statusBarHandler = new StatusBarHandler(PauseActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
 
-    @UiThread(delay = 1000)
-    void loadStatusBar() {
-        statusBarHandler = new StatusBarHandler(PauseActivity.this);
-        if (statusBarHandler != null && !statusBarHandler.isActive()) {
-            statusBarHandler.requestStatusBarCustomization();
+        } catch (Exception e) {
+            e.printStackTrace();
         }
+
     }
 
     private void loadTopBar() {
@@ -105,28 +129,37 @@ public class PauseActivity extends CoreActivity {
         if (launcherPrefs.isPauseActive().get()) {
             onStopPause();
         } else {
-            super.onBackPressed();
-        }
-
-        try {
-            if (statusBarHandler != null && statusBarHandler.isNotificationTrayVisible) {
+            if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+                /**
+                 *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+                 */
                 Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
-                if (f instanceof NotificationFragment) ;
+                if(f == null){
+                    super.onBackPressed();
+                }
+                else if (f!=null && f instanceof NotificationFragment && f.isAdded())
                 {
                     statusBarHandler.isNotificationTrayVisible = false;
                     ((NotificationFragment) f).animateOut();
+                    super.onBackPressed();
+                }
+                else{
+                    super.onBackPressed();
                 }
             }
-        } catch (Exception e) {
-            Log.d(TAG, "Exception e");
+            else{
+                super.onBackPressed();
+            }
         }
     }
 
     @Override
     protected void onStart() {
         super.onStart();
-
         Tracer.d("onStart PauseActivity");
+        if(state== ActivityState.ONHOMEPRESS){
+            state= ActivityState.NORMAL;
+        }
         if (tag != null) {
             if (nfcCheckHandler == null ) nfcCheckHandler = new Handler();
             nfcCheckHandler.postDelayed(buildNfcRunnable(tag), 5000);
@@ -150,16 +183,6 @@ public class PauseActivity extends CoreActivity {
             }
         }
 
-        NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
-        try {
-            if(statusBarHandler!=null)
-                statusBarHandler.restoreStatusBarExpansion();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-
-
-
     }
 
     @Click
@@ -253,4 +276,55 @@ public class PauseActivity extends CoreActivity {
         super.onRestart();
         loadStatusBar();
     }
+
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        /**
+         * Below snippet is use to load siempo status bar when launch from background.
+         */
+        if(state==ActivityState.ONHOMEPRESS){
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+        }
+    }
+
+    @SuppressWarnings("ConstantConditions")
+    @Subscribe
+    public void homePressEvent(HomePressEvent event) {
+        Log.d(TAG,"ACTION HOME PRESS");
+        state= ActivityState.ONHOMEPRESS;
+        if (event.isVisible()) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if(f == null){
+                    Log.d(TAG,"Fragment is null");
+                }
+                else if (f!=null && f.isAdded() && f instanceof NotificationFragment)
+                {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    ((NotificationFragment) f).animateOut();
+
+                }
+            }
+            /**
+             *  Below snippet is use to remove siempo status bar
+             */
+            if(statusBarHandler!=null){
+                NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+                try{
+                    statusBarHandler.restoreStatusBarExpansion();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+
+        }
+    }
 }
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoAlphaSettingsActivity.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoAlphaSettingsActivity.java
index 1b2d160..cac570c 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoAlphaSettingsActivity.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoAlphaSettingsActivity.java
@@ -1,5 +1,6 @@
 package co.siempo.phone.settings;
 
+import android.app.Fragment;
 import android.content.Context;
 import android.util.Log;
 
@@ -9,9 +10,12 @@ import org.androidannotations.annotations.Fullscreen;
 import org.androidannotations.annotations.UiThread;
 
 import co.siempo.phone.R;
+import co.siempo.phone.notification.NotificationFragment;
 import co.siempo.phone.notification.NotificationRetreat_;
 import co.siempo.phone.notification.StatusBarHandler;
 import co.siempo.phone.ui.TopFragment_;
+import de.greenrobot.event.Subscribe;
+import minium.co.core.event.HomePressEvent;
 import minium.co.core.ui.CoreActivity;
 
 /**
@@ -27,6 +31,18 @@ public class SiempoAlphaSettingsActivity extends CoreActivity {
     private Context context;
     private StatusBarHandler statusBarHandler;
 
+    private ActivityState state;
+
+    private final String TAG="SiempoAlphaSetting";
+    /**
+     * Activitystate is use to identify state whether the screen is coming from
+     * after homepress event or from normal flow.
+     */
+    private enum ActivityState {
+        NORMAL,
+        ONHOMEPRESS
+    }
+
     @AfterViews
     void afterViews() {
         initView();
@@ -34,11 +50,24 @@ public class SiempoAlphaSettingsActivity extends CoreActivity {
         loadStatusBar();
     }
 
-    @UiThread(delay = 1000)
-    void loadStatusBar() {
-        statusBarHandler = new StatusBarHandler(SiempoAlphaSettingsActivity.this);
-        if(statusBarHandler!=null && !statusBarHandler.isActive()) {
-            statusBarHandler.requestStatusBarCustomization();
+    /**
+     *  Below snippet is use to first check if siempo status bar is restricted from another activity,
+     *  then it first remove siempo status bar and restrict siempo status bar with reference to this activity
+     */
+    synchronized void loadStatusBar() {
+        try {
+            statusBarHandler = new StatusBarHandler(SiempoAlphaSettingsActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
     public void initView() {
@@ -52,6 +81,14 @@ public class SiempoAlphaSettingsActivity extends CoreActivity {
     @Override
     protected void onResume() {
         super.onResume();
+        /**
+         * Below snippet is use to load siempo status bar when launch from background.
+         */
+        if(state== ActivityState.ONHOMEPRESS){
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+        }
     }
 
     @Override
@@ -62,13 +99,6 @@ public class SiempoAlphaSettingsActivity extends CoreActivity {
     @Override
     protected void onStop() {
         super.onStop();
-        NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
-        try {
-            if (statusBarHandler != null)
-                statusBarHandler.restoreStatusBarExpansion();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
     }
 
     @Override
@@ -76,4 +106,76 @@ public class SiempoAlphaSettingsActivity extends CoreActivity {
         super.onRestart();
         loadStatusBar();
     }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        if(state== ActivityState.ONHOMEPRESS){
+            state= ActivityState.NORMAL;
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+            if(f == null){
+                Log.d(TAG,"Fragment is null");
+                super.onBackPressed();
+            }
+            else if (f!=null && f instanceof NotificationFragment && f.isAdded())
+            {
+                statusBarHandler.isNotificationTrayVisible = false;
+                ((NotificationFragment) f).animateOut();
+                super.onBackPressed();
+            }
+            else{
+                super.onBackPressed();
+            }
+        }
+        else{
+            super.onBackPressed();
+        }
+    }
+
+
+
+    @SuppressWarnings("ConstantConditions")
+    @Subscribe
+    public void homePressEvent(HomePressEvent event) {
+        state= ActivityState.ONHOMEPRESS;
+        if (event.isVisible()) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if(f == null){
+                    Log.d(TAG,"Fragment is null");
+                }
+                else if (f!=null && f.isAdded() && f instanceof NotificationFragment)
+                {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    ((NotificationFragment) f).animateOut();
+
+                }
+            }
+            /**
+             *  Below snippet is use to remove siempo status bar
+             */
+            if(statusBarHandler!=null){
+                NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+                try{
+                    statusBarHandler.restoreStatusBarExpansion();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+
+        }
+    }
 }
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoMainSettingsActivity.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoMainSettingsActivity.java
index 7e341eb..1270832 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoMainSettingsActivity.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoMainSettingsActivity.java
@@ -20,6 +20,8 @@ import co.siempo.phone.notification.NotificationFragment;
 import co.siempo.phone.notification.NotificationRetreat_;
 import co.siempo.phone.notification.StatusBarHandler;
 import co.siempo.phone.ui.TopFragment_;
+import de.greenrobot.event.Subscribe;
+import minium.co.core.event.HomePressEvent;
 import minium.co.core.ui.CoreActivity;
 
 
@@ -32,6 +34,16 @@ public class SiempoMainSettingsActivity extends CoreActivity {
     private SettingsAdapter adapter;
     private StatusBarHandler statusBarHandler;
     private Context context;
+    private final String TAG="SiempoMainSetting";
+    private ActivityState state;
+    /**
+     * Activitystate is use to identify state whether the screen is coming from
+     * after homepress event or from normal flow.
+     */
+    private enum ActivityState {
+        NORMAL,
+        ONHOMEPRESS
+    }
 
 
     @AfterViews
@@ -42,11 +54,24 @@ public class SiempoMainSettingsActivity extends CoreActivity {
         loadStatusBar();
     }
 
-    @UiThread(delay = 1000)
-    void loadStatusBar() {
-        statusBarHandler = new StatusBarHandler(SiempoMainSettingsActivity.this);
-        if(statusBarHandler!=null && !statusBarHandler.isActive()) {
-            statusBarHandler.requestStatusBarCustomization();
+    /**
+     *  Below snippet is use to first check if siempo status bar is restricted from another activity,
+     *  then it first remove siempo status bar and restrict siempo status bar with reference to this activity
+     */
+    synchronized void loadStatusBar() {
+        try {
+            statusBarHandler = new StatusBarHandler(SiempoMainSettingsActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
         }
     }
 
@@ -58,6 +83,7 @@ public class SiempoMainSettingsActivity extends CoreActivity {
                 if (settingsData != null) {
                     switch (settingsData.getId()) {
                         case 1:
+                            restoreSiempoNotificationBar();
                             new ActivityHelper(context).openPhoneSettingsApp();
                             break;
                         case 2:
@@ -105,6 +131,14 @@ public class SiempoMainSettingsActivity extends CoreActivity {
     @Override
     protected void onResume() {
         super.onResume();
+        /**
+         * Below snippet is use to load siempo status bar when launch from background.
+         */
+        if(state== ActivityState.ONHOMEPRESS){
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+        }
     }
 
     @Override
@@ -116,29 +150,33 @@ public class SiempoMainSettingsActivity extends CoreActivity {
     @Override
     protected void onStop() {
         super.onStop();
-        NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
-        try {
-            if (statusBarHandler != null)
-                statusBarHandler.restoreStatusBarExpansion();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
     }
 
     @Override
     public void onBackPressed() {
         if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
             Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
-            if (f!=null && f instanceof NotificationFragment) ;
+            if(f == null){
+                Log.d(TAG," Fragment is null");
+                super.onBackPressed();
+            }
+            else if (f!=null && f instanceof NotificationFragment && f.isAdded())
             {
                 statusBarHandler.isNotificationTrayVisible = false;
                 ((NotificationFragment) f).animateOut();
-
+                super.onBackPressed();
+            }
+            else{
+                super.onBackPressed();
             }
         }
-        super.onBackPressed();
+        else{
+            super.onBackPressed();
+        }
     }
-
     private void loadTopBar() {
         loadFragment(TopFragment_.builder().build(), R.id.statusView, "status");
     }
@@ -149,4 +187,79 @@ public class SiempoMainSettingsActivity extends CoreActivity {
         loadStatusBar();
     }
 
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        currentIndex=0;
+    }
+
+
+
+    public void restoreSiempoNotificationBar(){
+        try {
+            statusBarHandler = new StatusBarHandler(SiempoMainSettingsActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+
+            if (StatusBarHandler.isNotificationTrayVisible) {
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if (f == null) {
+                    Log.d(TAG, "Fragment is null");
+                } else if (f != null && f.isAdded() && f instanceof NotificationFragment) {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    //noinspection ConstantConditions
+                    ((NotificationFragment) f).animateOut();
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
+
+
+    @SuppressWarnings("ConstantConditions")
+    @Subscribe
+    public void homePressEvent(HomePressEvent event) {
+        state= ActivityState.ONHOMEPRESS;
+        if (event.isVisible()) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            if (StatusBarHandler.isNotificationTrayVisible) {
+
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if(f == null){
+                    Log.d(TAG,"F is null");
+                }
+                else if (f!=null && f.isAdded() && f instanceof NotificationFragment)
+                {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    ((NotificationFragment) f).animateOut();
+                }
+            }
+            /**
+             *  Below snippet is use to remove siempo status bar
+             */
+            if(statusBarHandler!=null){
+                NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+                try{
+                    statusBarHandler.restoreStatusBarExpansion();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+
+        }
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        if(state== ActivityState.ONHOMEPRESS){
+            state= ActivityState.NORMAL;
+        }
+    }
 }
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoSettingsActivity.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoSettingsActivity.java
index b0203a2..481f98b 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoSettingsActivity.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/settings/SiempoSettingsActivity.java
@@ -1,10 +1,12 @@
 package co.siempo.phone.settings;
 
+import android.app.Fragment;
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
+import android.os.Handler;
 import android.util.Log;
 import android.view.View;
 import android.widget.CheckBox;
@@ -30,12 +32,14 @@ import co.siempo.phone.BuildConfig;
 import co.siempo.phone.R;
 import co.siempo.phone.app.Launcher3Prefs_;
 import co.siempo.phone.helper.ActivityHelper;
+import co.siempo.phone.notification.NotificationFragment;
 import co.siempo.phone.notification.NotificationRetreat_;
 import co.siempo.phone.notification.StatusBarHandler;
 import co.siempo.phone.service.ApiClient_;
 import co.siempo.phone.ui.TopFragment_;
 import de.greenrobot.event.Subscribe;
 import minium.co.core.event.CheckVersionEvent;
+import minium.co.core.event.HomePressEvent;
 import minium.co.core.log.Tracer;
 import minium.co.core.ui.CoreActivity;
 import minium.co.core.util.UIUtils;
@@ -64,6 +68,16 @@ public class SiempoSettingsActivity extends CoreActivity {
     private String TAG = "SiempoSettingsActivity";
     private ProgressDialog pd;
 
+    private ActivityState state;
+    /**
+     * Activitystate is use to identify state whether the screen is coming from
+     * after homepress event or from normal flow.
+     */
+    private enum ActivityState {
+        NORMAL,
+        ONHOMEPRESS
+    }
+
     @SystemService
     ConnectivityManager connectivityManager;
 
@@ -85,12 +99,26 @@ public class SiempoSettingsActivity extends CoreActivity {
         currentIndex =0;
     }
 
-    @UiThread(delay = 1000)
-    void loadStatusBar() {
-        statusBarHandler = new StatusBarHandler(SiempoSettingsActivity.this);
-        if(statusBarHandler!=null && !statusBarHandler.isActive()) {
-            statusBarHandler.requestStatusBarCustomization();
+    /**
+     *  Below snippet is use to first check if siempo status bar is restricted from another activity,
+     *  then it first remove siempo status bar and restrict siempo status bar with reference to this activity
+     */
+    synchronized void loadStatusBar() {
+        try {
+            statusBarHandler = new StatusBarHandler(SiempoSettingsActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
         }
+
     }
 
     public void initView() {
@@ -145,6 +173,7 @@ public class SiempoSettingsActivity extends CoreActivity {
 
                                 @Override
                                 public void onFailed(AppUpdaterError error) {
+                                    if(BuildConfig.DEBUG)
                                     Log.d(TAG," AppUpdater Error ::: "+error.toString());
 
                                 }
@@ -172,21 +201,22 @@ public class SiempoSettingsActivity extends CoreActivity {
     @Override
     protected void onResume() {
         super.onResume();
+        /**
+         * Below snippet is use to load siempo status bar when launch from background.
+         */
         currentIndex =1;
+        if(state== ActivityState.ONHOMEPRESS){
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+            state= ActivityState.NORMAL;
+        }
     }
-
     @Override
     protected void onStop() {
 
         super.onStop();
         currentIndex =0;
-        NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
-        try {
-            if (statusBarHandler != null)
-                statusBarHandler.restoreStatusBarExpansion();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
     }
 
     @Override
@@ -257,4 +287,73 @@ public class SiempoSettingsActivity extends CoreActivity {
         }
     }
 
+    @Override
+    public void onBackPressed() {
+        if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+            if(f == null){
+                super.onBackPressed();
+            }
+            else if (f!=null && f instanceof NotificationFragment && f.isAdded())
+            {
+                statusBarHandler.isNotificationTrayVisible = false;
+                ((NotificationFragment) f).animateOut();
+                super.onBackPressed();
+            }
+            else{
+                super.onBackPressed();
+            }
+        }
+        else{
+            super.onBackPressed();
+        }
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        if(state== ActivityState.ONHOMEPRESS){
+            state= ActivityState.NORMAL;
+        }
+    }
+
+
+    @SuppressWarnings("ConstantConditions")
+    @Subscribe
+    public void homePressEvent(HomePressEvent event) {
+        state= ActivityState.ONHOMEPRESS;
+        if (event.isVisible()) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            if (StatusBarHandler.isNotificationTrayVisible) {
+
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if(f == null){
+                    Log.d(TAG,"Fragment is null");
+                }
+                else if (f!=null && f.isAdded() && f instanceof NotificationFragment)
+                {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    ((NotificationFragment) f).animateOut();
+                }
+            }
+            /**
+             *  Below snippet is use to remove siempo status bar
+             */
+            if(statusBarHandler!=null){
+                NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+                try{
+                    statusBarHandler.restoreStatusBarExpansion();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+
+        }
+    }
+
 }
diff --git a/MiniumApps/launcher3/src/main/java/co/siempo/phone/tempo/TempoActivity.java b/MiniumApps/launcher3/src/main/java/co/siempo/phone/tempo/TempoActivity.java
index 2d786bf..4281c19 100644
--- a/MiniumApps/launcher3/src/main/java/co/siempo/phone/tempo/TempoActivity.java
+++ b/MiniumApps/launcher3/src/main/java/co/siempo/phone/tempo/TempoActivity.java
@@ -17,7 +17,10 @@ import co.siempo.phone.R;
 import co.siempo.phone.notification.NotificationFragment;
 import co.siempo.phone.notification.NotificationRetreat_;
 import co.siempo.phone.notification.StatusBarHandler;
+import co.siempo.phone.pause.PauseActivity;
 import co.siempo.phone.ui.TopFragment_;
+import de.greenrobot.event.Subscribe;
+import minium.co.core.event.HomePressEvent;
 import minium.co.core.ui.CoreActivity;
 import minium.co.core.util.UIUtils;
 
@@ -27,6 +30,24 @@ public class TempoActivity extends CoreActivity {
     private StatusBarHandler statusBarHandler;
     private String TAG = "TempoActivity";
 
+    private ActivityState state;
+    /**
+     * Activitystate is use to identify state whether the screen is coming from
+     * after homepress event or from normal flow.
+     */
+    private enum ActivityState {
+        NORMAL,
+        ONHOMEPRESS
+    }
+
+    @Override
+    protected void onStart() {
+        super.onStart();
+        if(state== ActivityState.ONHOMEPRESS){
+            state= ActivityState.NORMAL;
+        }
+    }
+
     @AfterViews
     void afterViews() {
         // To check the notification service is enable or not.
@@ -68,13 +89,26 @@ public class TempoActivity extends CoreActivity {
             });
         }
     }
-
-    @UiThread(delay = 1000)
+    /**
+     *  Below snippet is use to first check if siempo status bar is restricted from another activity,
+     *  then it first remove siempo status bar and restrict siempo status bar with reference to this activity
+     */
     void loadStatusBar() {
-        statusBarHandler = new StatusBarHandler(TempoActivity.this);
-        if (statusBarHandler != null && !statusBarHandler.isActive()) {
-            statusBarHandler.requestStatusBarCustomization();
+        try {
+            statusBarHandler = new StatusBarHandler(TempoActivity.this);
+            NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+            if (statusBarHandler != null) {
+                statusBarHandler.restoreStatusBarExpansion();
+            }
+
+            if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                statusBarHandler.requestStatusBarCustomization();
+            }
+
+        } catch (Exception e) {
+            e.printStackTrace();
         }
+
     }
 
     private void loadTopBar() {
@@ -84,7 +118,13 @@ public class TempoActivity extends CoreActivity {
     @Override
     protected void onResume() {
         super.onResume();
-    }
+
+            if(state== ActivityState.ONHOMEPRESS){
+                if(statusBarHandler!=null && !statusBarHandler.isActive()) {
+                    statusBarHandler.requestStatusBarCustomization();
+                }
+            }
+        }
 
     @Override
     protected void onPause() {
@@ -94,30 +134,28 @@ public class TempoActivity extends CoreActivity {
     @Override
     protected void onStop() {
         super.onStop();
-        NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
-        try {
-            if (statusBarHandler != null)
-                statusBarHandler.restoreStatusBarExpansion();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
     }
 
     @Override
     public void onBackPressed() {
-        super.onBackPressed();
-        try {
-            if (statusBarHandler.isNotificationTrayVisible) {
-                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
-                if (f instanceof NotificationFragment) ;
-                {
-                    statusBarHandler.isNotificationTrayVisible = false;
-                    ((NotificationFragment) f).animateOut();
-                }
+        if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+            Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+            if(f == null){
+                Log.d(TAG," Fragment is null");
+                super.onBackPressed();
             }
-        } catch (Exception e) {
-            if (BuildConfig.DEBUG)
-                Log.d(TAG, "Exception onBackPressed.." + e.toString());
+            else if (f!=null && f instanceof NotificationFragment && f.isAdded())
+            {
+                statusBarHandler.isNotificationTrayVisible = false;
+                ((NotificationFragment) f).animateOut();
+                super.onBackPressed();
+            }
+            else{
+                super.onBackPressed();
+            }
+        }
+        else{
+            super.onBackPressed();
         }
     }
 
@@ -126,4 +164,42 @@ public class TempoActivity extends CoreActivity {
         super.onRestart();
         loadStatusBar();
     }
+
+
+
+    @SuppressWarnings("ConstantConditions")
+    @Subscribe
+    public void homePressEvent(HomePressEvent event) {
+        Log.d(TAG,"ACTION HOME PRESS");
+        state= ActivityState.ONHOMEPRESS;
+        if (event.isVisible()) {
+            /**
+             *  Below snippet is use to remove notification fragment (Siempo Notification Screen) if visible on screen
+             */
+            if (statusBarHandler!=null && statusBarHandler.isNotificationTrayVisible) {
+
+                Fragment f = getFragmentManager().findFragmentById(R.id.mainView);
+                if(f == null){
+                    Log.d(TAG,"Fragment is null");
+                }
+                else if (f!=null && f.isAdded() && f instanceof NotificationFragment)
+                {
+                    StatusBarHandler.isNotificationTrayVisible = false;
+                    ((NotificationFragment) f).animateOut();
+
+                }
+            }
+            /**
+             *  Below snippet is use to remove siempo status bar
+             */
+            if(statusBarHandler!=null){
+                NotificationRetreat_.getInstance_(this.getApplicationContext()).retreat();
+                try{
+                    statusBarHandler.restoreStatusBarExpansion();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
 }
diff --git a/MiniumApps/launcher3/src/main/res/layout/list_item_apps.xml b/MiniumApps/launcher3/src/main/res/layout/list_item_apps.xml
index f609478..c2208c3 100644
--- a/MiniumApps/launcher3/src/main/res/layout/list_item_apps.xml
+++ b/MiniumApps/launcher3/src/main/res/layout/list_item_apps.xml
@@ -27,7 +27,8 @@
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
     android:layout_height="54dp"
-    tools:background="@color/material.core.red">
+    tools:background="@color/material.core.red"
+    tools:ignore="UnusedResources">
 
     <de.hdodenhof.circleimageview.CircleImageView
         android:id="@+id/icon"
-- 
1.9.1

